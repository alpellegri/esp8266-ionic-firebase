1. Data Object Definitions
   =======================

  These entities are defined into a json database.

  data object definition:

  <data-symbol> : {
    "code" : <code>,
    "ioctl" : <ioctl>,
    "owner" : <device-symbol>,
    "value" : <value>
    "cb" : [<cb>]
  },
  <code> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11"
  // define the type of the object
  enum {
    /*  0 */ PhyIn,
    /*  1 */ PhyOut,
    /*  2 */ DhtTemperature,
    /*  3 */ DhtHumidity,
    /*  4 */ RadioRx,
    /*  5 */ RadioIn,
    /*  6 */ RadioTx,
    /*  7 */ Timer,
    /*  8 */ Bool,
    /*  9 */ Int,
    /* 10 */ Float,
    /* 11 */ Messaging,
  };
  <data-symbol> ::= string
  // define the reference name of the object
  <ioctl> ::= integer
  // define physical and logical setting of the object
  <device> ::= string
  // define the device where the object is implemented
  <value> ::= integer | string
  // define the value of the object
  <cb> ::= string
  // define the name of the routine to be called on value write

* <code> == PhyIn | PhyOut
  this maps a i/o device pin
  pin-num = <ioctl>
  pin-value := <value>
  <value> := pin_value

  VM register ACC = <value>

  example
  {
    "code" : 1,
    "drawWr" : true,
    "ioctl" : 16,
    "owner" : "Node1",
    "value" : 1
  }

* <code> == Timer
  it variable describing the time in minute in a week.
  Time is represent a tick (a minute) inside  a week (7*24*60=34560 ticks) time is a modulo number.
  in case of modulo-day 1439+1 overflow to 0, in case of modulo-week 34559+1 overflow to 0.
  The idea is to use this as a base for event generation. When its value change a callback may be
  called.

  day-minute := <value>
  week-days := <ioctl> & 0x7F0000
  all-week-day := <ioctl> & 0x800000
  polarity := <ioctl> & 0x1000000

  callback is called and ACC is set with polarity value (ACC = polarity)

  At start VM read all timers from DB and store them to RAM. VM generates callbacks when timer value
  is reached

* <code> == RadioIn

  radio-code := <value>
  radio-mask := <ioctl>

  At start VM read all radioin from DB and store them to RAM.

  if (radio & radio-mask) == (radio-code & radio-mask)
    VM call callback cb
    ACC = radio & ~radio-mask

  example
  {
    "code" : 5,
    "ioctl" : 0,
    "owner" : "Node1",
    "value" : "7418204"
  }

* <code> == RadioRx
  <value> := radio
  pin := <ioctl>

  VM call cb on write <value>
  and ACC = <value>

* <code> == RadioTx
  radio := <value>
  pin := <ioctl>

* notify is a logical output

* variables are input/output and may have a callback

2. Program Definition
   ==================

These entities are defined into a database.

Program run into a simple virtual machine VM.

* functions: execute a statement of a program, can call other statement

  key -> {
    "owner" : <node>,  // it is a string
    "p" : [<array>],   // it is an array.
  }

  <routine-symbol> : {
    "owner" : <device-symbol>,
    "p" : [<array>]
  }

  <array-element> : {
    "i" : <instr>,
    "v" : <arg>,
  }

  <instr> ::=
    /*  0: ex0  */
    /*  1: ldi  */
-----    /*  2: ld24 */
    /*  3: ld   */
-----    /*  4: st24 */
    /*  5: st   */
    /*  6: lt   */
    /*  7: gt   */
    /*  8: eqi  */
    /*  9: eq   */
    /* 10: bz   */
    /* 11: bnz  */
    /* 12: dly  */
    /* 13: stne */
    /* 14: lte  */
    /* 15: gte  */
    /* 16: halt */
    /* 17: jmp  */

  <arg> := <data-symbol>


* VM execution model
At startup, the VM initializes its runtime environment copying all DB entities.

VM is responsible on capturing Data entities changes (entry.ev == true).
On event, the VM fetch instruction and data and execute them.
The VM is provided by a accumulator register ACC and a V register used to store the last read data.

typedef struct {
  uint32_t V
  uint32_t ACC;
} vm_context_t

1. VM find a event on a data entry (entry.ev == true), then check the cb (entry.cb)
  and clear the event indication
  entry.ev = false

  where:
  entry.cb = 'key-function' is a key of DB

  if (entry.ev == true) {
    entry.ev = false;
    key_prog = entry.cb
  }

2. VM-fetch
  key_prog is the entry point of a program

  if (key_prog != null) {
    prog = lookup(key_prog)
  }

  array-element = {
    "i": <instr>,
    "v": <arg>,
  }

3. VM-decode

  pc = 0;
  while (pc < prog_array.size()) {
   pc = decode(pc, prog_array[pc].code, prog_array[pc].value)
  }

  load data
  execute
  write data

  pipeline definition:
  typedef struct {
    void (*read)(vm_context_t &ctx, const char *value);
    uint8_t (*exec)(uint8_t pc, vm_context_t &ctx, const char *key_value);
    void (*write)(vm_context_t &ctx, char *key_value);
  } itlb_t;

3.1 VM-decode-read
if instruction is immediate then:
  V = value

if instruction is not immediate, value represent a key of the DB:
  // fetch
  vm_pipe[code].read(ctx, *value)

  // immediate value
  void vm_readi(ctx, const char *value) {
    ctx.V = atoi(value.c_str());
  }

  // not immediate value
  void vm_read(ctx, const char *key_value) {
    data = lookup(key_value);
    ctx.V = data.value;
  }

3.2 VM-decode-execution
  pc is the index of the array-element to be executed. No branch instructions will increment pc by one.

  pc = vm_pipe[code].exec(pc, ctx, value)

  execute <instr> against the tuple {pc, ACC, V, value}
  pc = <instr>(pc, ACC, V, value)
  inc is an output incrementer because an instruction is able to change the execution flow

3.3 VM-decode-write

  vm_pipe[code].write(ctx, stm.value);

  data = lookup(stm.value)
  data.value = ACC

  void vm_write(ctx, const char *key) {
    data = lookup(key.value);
    data.value = ctx.ACC;
    data.wb = true;
  }

4. VM-write-back
All variable have to contain an indication flag (data.wb == true) are asked to be written back to
the DB

A1.1 example simple boolean trigger
    ===============================
instruction-code:
Routine1:
  0: st Status

{
  "Input" : {
    "cb" : "Routine1"
    "code" : 0,
    "enLog" : false,
    "ioctl" : 1,
    "owner" : "Node1",
    "value" : 0,
  },
  "Status" : {
    "code" : 8,
    "enLog" : false,
    "ioctl" : 0,
    "owner" : "Node1",
    "value" : "0"
  },
}
{
  "Routine1" : {
    "owner" : "Node1",
    "p" : [ {
      "i" : 5,
      "v" : "Status"
    } ]
  }
}

A2. example led on/off depending by a variable
   ===========================================

led: physical output mapped on a pin
status: variable

instruction-code:
Routine2:
0: st led

{
  "Led1" : {
    "code" : 1,
    "ioctl" : 16,
    "owner" : "Node1",
    "value" : 1
  },
  "Status" : {
    "cb" : "Routine2"
    "code" : 8,
    "ioctl" : 0,
    "owner" : "Node1",
    "value" : "0"
  }
}

{
  "Routine2" : {
    "owner" : "Node1",
    "p" : [ {
      "i" : 5,
      "v" : "Led1"
    } ]
  }
}

A3. example sensor trigger with hysteresis switching a relay
   =========================================================

sensor: physical input mapped on a pin
status: variable

pseudo-code:

init:
  status = false;
  T1 = 90
  T2 = 110

the following code write the output variable status only when status needs to change.

           -----             -----
  T2_     /     \           /
         /       \         /
  T1_   /         \       /
       /           \     /
      /             -----
  OFF     ON       OFF      ON
  	______---------_________------

run:
  @sensor.event
  if (status == true) {
    if (sensor<T1) {
      status = false;
    }
  } else {
    if (sensor>T2) {
      status = true;
    }
  }

instruction-code:
0: ld status
1: bz 6
2: ld sensor
3: gt T1
4: bnz 10
5: jmp 9
6: ld sensor
7: gt T2
8: bz 10
9: st status

// the following code write the output variable status the proper condition is
// satisfied, that is not efficient. Using a special function stne (store if not
// equal) this can be avoided. The code starts with testing against the ACC where
// is stored the calling event value.
// This allows to reduce the number of the instructions to 5 and saving RAM and
// CPU load on device.

key-sensor -> {
  code: phyin,
  value: pin<<24,
  cb: key-prog,
}
key-status -> {
  code: bool,
  value: 0, // only the init value
}
key-T1 -> {
  code: int,
  value: 90,
}
key-T2 -> {
  code: int,
  value: 110,
}
key-prog -> {
  name: 'prog',
  p: [
    { i: ld, v: key-status },
    { i: bz, v: 6 },
    { i: ld, v: key-sensor },
    { i: gt, v: key-T1 },
    { i: bnz, v: 10 },
    { i: jmp, v: 9 },
    { i: ld, v: key-sensor },
    { i: gt, v: key-T2 },
    { i: bz, v: 10 },
    { i: st, v: key-status },
    { i: st, v: key-led }
  ]
}

           -----             -----
  T2_     /     \           /
         /       \         /
  T1_   /         \       /
       /           \     /
      /             -----
  ON      OFF      ON       OFF
  	------_________---------_______

run:
  @sensor.event
  if (status == false) {
    if (sensor<T1) {
      status = true;
    }
  } else {
    if (sensor>T2) {
      status = false;
    }
  }

instruction-code:
0: ld status
1: bnz 6
2: ld sensor
3: lt T1
4: bz 10
5: jmp 9
6: ld sensor
7: lt T2
8: bnz 10
9: st status


A4. example radio code and alarm
   =============================

sensor: radioin input
id: radiorx input
alarm-status: variable
rx-radio: variable

pseudo-code:
  @id.event
  if (sensor == true) {
    if (alarm-status == true) {
      notify = true;
    }
  }
  if (id == true) {
    rx-radio = id;
  }

key-PIR-Code -> {
  code: radioin,
  value: 0xffaaff, // example configuration
  cb: key-prog1,
}
key-RxConfconf -> {
  code: radiorx,
  value: 0,
  cb: key-prog2,
}
key-rx-radio -> {
  code: int,
  value: 0,
}
key-notify-message -> {
  code: logout,
  value: kmessage,
}
key-alarm-active -> {
  code: bool,
  value: 0, // only the init value
}
key-prog1 -> {
  name: 'prog1',
  p: [
    { i: ld, v: key-alarm-active },
    { i: bz, v: end },
    { i: st, v: key-notify-message }
    { i: ldi, v: 0 }
    { i: st24, v: key-led }
    { i: dly, v: 300 }
    { i: ldi, v: 0 }
    { i: st24, v: key-led }
  ]
}
key-prog2 -> {
  name: 'prog2',
    p: [
    { code: st, value: key-rx-radio }
  ]
}

A5. timer control led
   ==================
led: physical output mapped on a pin
Time is a physical values

pseudo-code:
  @timer1.event
  if (timer1 == true) {
    led = true;
  }
  @timer2.event
  if (timer2 == true) {
    led = false;
  }

{
  "Routine2" : {
    "owner" : "Node1",
    "p" : [ {
      "i" : 5,
      "v" : "Led1"
    } ]
  }
}
