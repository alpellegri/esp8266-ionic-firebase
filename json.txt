1. Data Definitions
   ================

  These entities are defined into a database.

  definition
  key -> {
    owner: <owner>, // it is a string
    name: <name>,   // it is a string
    code: <type>,   // it is a enum
    value: <value>, // it is dynamic: a string or a number
    cb: <callback>, // it is a string representing the key of the database
  }
  type: {phyin, phyout, timer, login, logout, bool, int, float}

* physical i/o
  type: {phyin, phyout}
  i/o are addressed by id (pin, value: v)

  . input is scanned periodically (or event driven)
    on change can generate a call back
  . output is program driven

  input
  identifier = pin<<24
  key -> {
    owner: <owner>,
    name: <name>,
    code: phyin,
    value: <identifier>, // it is a number
    cb: <callback>,
  }

  output
  identifier = pin<<24|value
  key -> {
    owner: <owner>,
    name: <name>,
    code: phyout,
    value: <identifier>, // it is a number
    cb: <callback>,
  }

* timer is a logical value.
  it variable describing the time in a day or a week.
  Time is represent a tick (a minute) inside a day (24*60=1440 ticks) or a week
  (7*24*60=34560 ticks) time is a modulo number.
  in case of modulo-day 1439+1 overflow to 0, in case of modulo-week 34559+1 overflow to 0.
  The idea is to use this as a base for event generation. When its value change a callback may be
  called.
  
  key -> {
    owner: <owner>,
    name: <namer>,
    code: timer,
    value: <configuration>, // it is an number
    cb: <callback>,
  }
  hour: (5bits)
  minutes: (6bits)
  map: weekday bitmap (7bits)
  configuration: map<<11|hour<<6|minutes (18bits)
  
  At start VM read all timers from DB and store them to RAM. VM generates callbacks when timer value
  is reached

* radioin is a logical value.
  key -> {
    owner: <owner>,
    name: <radio>,
    code: radioin,
    value: <configuration>, // it is a number
    cb: <callback>,
  }
  configuration: mask

  At start VM read all radiomach from DB and store them to RAM.
  if (radio & mask) == mask an event is 
  VM call callback cb when (radio & mask) == mask
  and ACC = radio & ~mask

* radin is a logical value.
  key -> {
    owner: <owner>,
    name: <radio>,
    code: radiorx,
    value: 0, // not used
    cb: <callback>,
  }

  VM call callback cb when a radio is received and no match happened
  and ACC = radio

* radioout is a logical value.
  key -> {
    owner: <owner>,
    name: <radio>,
    code: radioout,
    value: <configuration>, // it is a number
    cb: <callback>,
  }
  configuration: mask

* notify is a logical values
  key -> {
    owner: <owner>,
    name: <name>,
    code: logout,
    value: kmessage, // it is a number
    cb: <callback>,
  }

* variables are input/output and may have a callback
  These entities are defined into a database.
  Variable are read periodically or at event and copyed into local
  type: {bool, int, float}

  generic definition
  key: {
    owner: <node>,  // it is a string
    name: <name>,   // it is a string
    code: <type>,   // it is a number (enum)
    value: <value>, // it is a number
    subscriber: {   // this is an array
      <node>: <callback>,
      ...,
      <node>: <callback>,
    },
  }

2. Function Definitions
   ====================

These entities (data and functions) are defined into a database.

Functions run into a simple virtual machine VM.

* functions: execute a statement of a program, can call other statement

  key: {
    name: <name>,   // it is a string
    code: <instr>,  // it is a enum
    value: <arg>,   // it is a string. depending on the instruction can be an integer or a string
    cb: <callback>, // it is a string representing the key of the database
  }

  instr: {
    ex0, // exception, illegal op-code 0
    ldi, // load immediate arg value into ACC (this involves a fetch from DB)
    ld,  // load arg value into ACC (this involves a fetch from DB)
    st,  // store arg value into ACC (this involves a write back to DB)
    lt,  // if ACC is less than arg, then ACC=1, else ACC=0
    gt,  // if ACC is grater than arg, then ACC=1, else ACC=0
    eqi, // if ACC is equal to immediate arg value, then ACC=1, else ACC=0
    eq,  // if ACC is equal to arg, then ACC=1, else ACC=0
    bz,  // branch if ACC is zero
    bnz, // branch if ACC is not zero
    dly, // delay in ms
  }

* VM execution model
At startup, the VM initializes its runtime environment copying all DB entities.

VM is responsible on capturing Data entities changes (entry.ev == true).
On event, the VM fetch instruction and data and execute them.
The VM is provided by a accumulator register ACC.

1. VM find a event on a data entry (entry.ev == true), then check the cb (entry.cb)
  and clear the event indication
  entry.ev = false

  where:
  entry.cb = 'key-function' is a key of DB

  if (entry.ev == true) {
    entry.ev = false;
    key_stm = entry.cb
  }

2. VM-fetch
  entry_stm act as a program counter
  
  if (key_stm != null) {
    stm = lookup(key_stm)
  }

  stm = {
    name: <name>,
    code: <instr>,
    value: <arg>,
    cb: <callback>,
  }
  code = stm.code
 
3. VM-decode

  decode(stm.code, value)

  load data
  execute
  write data
  
  pipeline definition:
  typedef struct {
    uint32_t (*read)(String value);
    uint32_t (*exec)(uint32_t acc, uint32_t v, String key_value, String &key);
    void (*write)(String key_value, uint32_t acc);
  } itlb_t;

3.1 VM-decode-read
if instruction is immediate then:
  V = value
  
if instruction is not immediate, value represent a key of the DB:
  // index 0: fetch
  V = vm_pipe[code].read(stm.value)

  // immediate value
  uint32_t vm_readi(String value) {
    return atoi(value.c_str());
  }

  // not immediate value
  uint32_t vm_read(String key_value) {
    data = lookup(key_value);
    return data.value;
  }

3.2 VM-decode-execution

  key_stm = stm.cb
  ACC = vm_pipe[code].exec(ACC, V, stm.value, &key_stm)

  execute <instr> against the tuple {ACC, V, stm.value, stm.cb}
  key_stm = stm.cb
  ACC, entry_stm = <instr>(ACC, V, stm.value, key_stm)
  entry_stm is an output because an instruction is able to change the execution flow
  
3.3 VM-decode-write

  vm_pipe[code].write(stm.value, ACC);
  stm = stm.cb; // move on the next element
  
  data = lookup(stm.value)
  data.value = ACC

  void vm_write(String key, acc) {
    data = lookup(key.value);
    data.value = acc;
    data.wb = true;
  }

4. VM-write-back
All variable have to contain an indication flag (data.wb == true) are asked to be written back to
the DB

  |     code|F|R|E|W|      READ|         EXEC|      WRITE 
00|ex0 |   0|x| |x| |      null,  vm_exec_ex0,       null
01|ldi |   1|x|x|x| |  vm_readi,  vm_exec_ldi,       null
02|ld24|   2|x|x|x| | vm_read24, vm_exec_ld24,       null
03|ld  |   3|x|x|x| |   vm_read,  vm_exec_ldi,       null
04|st24|   4|x| |x|x|  vm_read0, vm_exec_st24, vm_write24
05|st  |   5|x| |x|x|  vm_read0,   vm_exec_st,   vm_write
06|lt  |   6|x|x|x| |   vm_read,   vm_exec_lt,       null
07|gt  |   7|x|x|x| |   vm_read,   vm_exec_gt,       null
08|eqi |   8|x|x|x| |  vm_readi,   vm_exec_eq,       null
09|eq  |   9|x|x|x| |   vm_read,   vm_exec_eq,       null
10|bz  |  10|x| |x| |  vm_read0,   vm_exec_bz,       null
11|bnz |  11|x| |x| |  vm_read0,  vm_exec_bnz,       null
12|dly |  12|x|x|x| |   vm_read,  vm_exec_dly,       null

uint32_t vm_exec_ex0(uint32_t acc, uint32_t v, String& stm) {
  String empty;
  stm = empty;
  return 0;
}

uint32_t vm_exec_ldi(uint32_t acc, uint32_t v, String& vString, String& stm) {
  return v;
}

uint32_t vm_exec_ld24(uint32_t acc, uint32_t v, String& vString, String& stm) {
  return v&(1<<24-1);
}

void vm_exec_st24(uint32_t acc, uint32_t v, String& vString, String& stm) {
}

void vm_exec_st(uint32_t acc, uint32_t v, String& vString, String& stm) {
}

uint32_t vm_exec_lt(uint32_t acc, uint32_t v, String& vString, String& stm) {
  return v<acc;
}

uint32_t vm_exec_gt(uint32_t acc, uint32_t v, String& vString, String& stm) {
  return v>acc;
}

uint32_t vm_exec_eq(uint32_t acc, uint32_t v, String& vString, String& stm) {
  return v==acc;
}

uint32_t vm_exec_bz(uint32_t acc, uint32_t v, String& vString, String& stm) {
  if (acc == 0) {
    stm = vString;
  }
  return acc;
}

uint32_t vm_exec_bnz(uint32_t acc, uint32_t v, String& vString, String& stm) {
  if (acc != 0) {
    stm = vString;
  }
  return acc;
}

A1.1 example simple boolean trigger
    ===============================

pin: physical input mapped on a pin

pseudo-code:
  @pin.event
  if (pin>0) {
    status = true;
  } else {
    status = false;
  }
  
or:
  @pin.event
  status = (pin>0);

instruction code:
f01: ld24 pin, f02
f02: eqi 1, f03
f03: st status, end

key-sensor: {
  name: 'sensor',
  code: phyin,
  value: pin<<24,
  cb: key-f01,
}
key-thr1: {
  name: 'thr1',
  code: var,
  value: 90,
  cb: end,
}
key-status: {
  name: 'status',
  code: bool,
  value: 0,
  cb: end,
}
key-f01: {
  name: 'f01',
  code: ld,
  value: key-sensor,
  cb: key-f02,
}
key-f02: {
  name: 'f02',
  code: eqi,
  value: 0,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: st,
  value: key-status,
  cb: end,

A1.2 example simple sensor trigger
    ==============================

sensor: physical input mapped on a pin
thr1: variable

pseudo-code:
  @sensor.event
  if (sensor>thr) {
    status = true;
  } else {
    status = false;
  }
  
or:
  @sensor.event
  status = (sensor>thr);

instruction code:
f01: ld sensor, f02
f02: lt thr, f03
f03: st status, end

key-sensor: {
  name: 'sensor',
  code: phyin,
  value: pin<<24,
  cb: key-f01,
}
key-thr1: {
  name: 'thr1',
  code: var,
  value: 90,
  cb: end,
}
key-status: {
  name: 'status',
  code: bool,
  value: 0,
  cb: end,
}
key-f01: {
  name: 'f01',
  code: ld,
  value: key-sensor,
  cb: key-f02,
}
key-f02: {
  name: 'f02',
  code: eqi,
  value: 0,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: st,
  value: key-status,
  cb: end,

A2. example led on/off depending by a variable
   ===========================================

led: physical output mapped on a pin
status: variable

pseudo-code:
  @status.event
  if (status != 0) {
    led = true;
  } else {
    led = false;
  }

or:
  @status.event
  led = (status != 0);

instruction-code:
f01: ld status, f02
f02: eqi 0, f03
f03: st led, end

key-led: {
  name: 'led',
  code: phyout,
  value: pin<<24,
  cb: end,
}
key-status: {
  name: 'status',
  code: bool,
  value: 0,
  cb: key-f01,
}
key-f01: {
  name: 'f01',
  code: ld,
  value: key-status,
  cb: key-f02,
}
key-f02: {
  name: 'f02',
  code: eqi,
  value: 0,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: st,
  value: key-led,
  cb: end,
}

A3. example sensor trigger with hysteresis switching a relay
   =========================================================

sensor: physical input mapped on a pin
status: variable

pseudo-code:

init:
  status = false;
  thr1 = 90
  thr2 = 110

run:
  @sensor.event
  if (status == true) {
    if (sensor<thr1) {
      status = false;
    }
  } else {
    if (sensor>thr2) {
      status = true;
    }
  }

instruction-code:
f01: ld status, f02
f02: bz f6, f03
f03: ld sensor, f04
f04: lt thr1, f05
f05: bz end, f09
f06: ld sensor, f07
f07: lt thr1, f08
f08: bnz end, f09
f09: st status, end

key-sensor: {
  name: 'sensor',
  code: phyin,
  value: pin<<24,
  cb: key-f01,
}
key-status: {
  name: 'status',
  code: bool,
  value: 0, // only the init value
  cb: end,
}
key-thr1: {
  name: 'thr1',
  code: int,
  value: 90,
  cb: end,
}
key-thr2: {
  name: 'thr2',
  code: int,
  value: 110,
  cb: end,
}
key-f01: {
  name: 'f01',
  code: ld,
  value: key-status,
  cb: key-f02,
}
key-f02: {
  name: 'f02',
  code: bz,
  value: key-f06,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: ld,
  value: key-sensor,
  cb: key-f04,
}
key-f04: {
  name: 'f04',
  code: lt,
  value: key-thr1,
  cb: key-f05,
}
key-f05: {
  name: 'f05',
  code: bz,
  value: end,
  cb: key-f09,
}
key-f06: {
  name: 'f06',
  code: ld,
  value: key-sensor,
  cb: key-f07,
}
key-f07: {
  name: 'f07',
  code: lt,
  value: key-thr2,
  cb: key-f08,
}
key-f08: {
  name: 'f08',
  code: bnz,
  value: end,
  cb: key-f09,
}
key-f09: {
  name: 'f09',
  code: st,
  value: key-status,
  cb: key-f10,
}
key-f10: {
  name: 'f10',
  code: st,
  value: key-led,
  cb: end,
}

diagram
:)f01~ld)--:)f02~bz)--:)f03~ld)--:)f04~lt)--:)f05~bz)--:)f09~st
status      f06   |    v          thr1       end      | status
                  |                                   |
                  +--:)f06~ld)--:)f07~gt)--:)f08~bnz)-+
                     v          thr2       end

diagram
v->(f01: ld status)->(f02: bz f06)->(f03: ld v)->(f04: lt thr1)->(f05: bz end)->(f09: st status)->(f10: st led)->end
                              |                                               |
                              +---->(f06: ld v)->(f07: gt thr2)->(f08: bnz)---+

A4. example radio code and alarm
   =============================

sensor: radioin input
id: radiorx input
alarm-status: variable
last-radio: variable

pseudo-code:
  @id.event
  if (sensor == true) {
    if (alarm-status == true) {
      notify = true;
    }
  }
  if (id == true) {
    last-radio = id;
  }

key-sensor: {
  name: 'sensor',
  code: radioin,
  value: 0xffaaff, // configuration
  cb: key-f01,
}
key-id: {
  name: 'id',
  code: radiorx,
  value: 0,
  cb: key-f04,
}
key-unknown-radio: {
  name: 'unknown-radio',
  code: int,
  value: 0,
  cb: end,
}
key-notify: {
  name: 'notify',
  code: logout,
  value: kmessage,
  cb: end,
}
key-alarm-status: {
  name: 'alarm-status',
  code: bool,
  value: 0, // only the init value
  cb: end,
}
key-f01: {
  name: 'f01',
  code: ld,
  value: key-alarm-status,
  cb: key-f02,
}
key-f02: {
  name: 'f02',
  code: bz,
  value: end,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: st,
  value: key-notify,
  cb: end,
}
key-f04: {
  name: 'f06',
  code: st,
  value: key-unknown-radio,
  cb: end,
}

A5. timer control led
   ==================
led: physical output mapped on a pin
Time is a physical values

pseudo-code:
  @timer1.event
  if (timer1 == true) {
    led = true;
  }
  @timer2.event
  if (timer2 == true) {
    led = false;
  }

key-timer1: {
  name: <name>,
  code: int,
  value: 0*60+0,
  cb: key-f01,
}
key-timer2: {
  name: <name>,
  code: int,
  value: 0*60+1,
  cb: key-f02,
}
key-led: {
  name: 'led',
  code: phyout,
  value: pin<<24,
  cb: end,
}
key-f01: {
  name: 'f01',
  code: ldi,
  value: 1,
  cb: key-f03,
}
key-f02: {
  name: 'f02',
  code: ldi,
  value: 0,
  cb: key-f03,
}
key-f03: {
  name: 'f03',
  code: st,
  value: key-led,
  cb: end,
}
